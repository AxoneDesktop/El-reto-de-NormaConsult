import os
import json
import time
from rag_engine import RAGEngine

def print_separator():
    print("\n" + "="*80 + "\n")

def test_normativas_search():
    print("üîç TEST 1: B√öSQUEDA EN NORMATIVAS")
    print_separator()
    
    queries = [
        # Pruebas de b√∫squeda sem√°ntica
        ("Requisitos de ventanas en dormitorios", "B√∫squeda sobre ventanas"),
        ("Protecci√≥n contra el ruido en medianeras", "B√∫squeda sobre ac√∫stica"),
        ("Sistema de climatizaci√≥n eficiente", "B√∫squeda sobre climatizaci√≥n"),
        ("Anchura m√≠nima de pasillos", "B√∫squeda sobre accesibilidad"),
        ("Detectores de humo obligatorios", "B√∫squeda sobre seguridad"),
        
        # Pruebas de sin√≥nimos y t√©rminos relacionados
        ("Aislante en muros", "B√∫squeda con sin√≥nimo de aislamiento"),
        ("Transmisi√≥n de calor en fachadas", "B√∫squeda relacionada con aislamiento t√©rmico"),
        ("Evacuaci√≥n en caso de fuego", "B√∫squeda relacionada con incendios"),
        
        # Pruebas de consultas complejas
        ("Requisitos de ventilaci√≥n y aislamiento en un s√≥tano", "B√∫squeda multi-concepto"),
        ("Normas de seguridad para escaleras en edificios altos", "B√∫squeda espec√≠fica"),
    ]
    
    rag = RAGEngine('data/normativas', 'data/tickets.json')
    
    for query, description in queries:
        print(f"\nüìù {description}")
        print(f"Consulta: '{query}'")
        
        start_time = time.time()
        results = rag.search_normativas(query)
        search_time = time.time() - start_time
        
        print(f"\nTiempo de b√∫squeda: {search_time:.2f} segundos")
        print(f"Resultados encontrados: {len(results)}")
        
        if results:
            print("\nTop 3 resultados m√°s relevantes:")
            for i, result in enumerate(results[:3], 1):
                print(f"\n{i}. Documento: {result['documento']}")
                print(f"   Relevancia: {(1 - result['score']/10)*100:.1f}%")
                print(f"   Extracto: {result['contenido'][:200]}...")

def test_similar_tickets():
    print("\nüé´ TEST 2: B√öSQUEDA DE TICKETS SIMILARES")
    print_separator()
    
    test_queries = [
        ("Necesito saber los requisitos de aislamiento para una fachada nueva", "Consulta sobre aislamiento"),
        ("¬øQu√© medidas de seguridad contra incendios necesito en un parking?", "Consulta sobre seguridad"),
        ("¬øEs obligatorio poner un ascensor en un edificio de 3 plantas?", "Consulta sobre accesibilidad"),
        ("Reforma de ba√±os, ¬øqu√© normativa de ventilaci√≥n aplica?", "Consulta sobre ventilaci√≥n"),
    ]
    
    rag = RAGEngine('data/normativas', 'data/tickets.json')
    
    for query, description in test_queries:
        print(f"\nüìù {description}")
        print(f"Nueva consulta: '{query}'")
        
        start_time = time.time()
        similar_tickets = rag.find_similar_tickets(query)
        search_time = time.time() - start_time
        
        print(f"\nTiempo de b√∫squeda: {search_time:.2f} segundos")
        print(f"Tickets similares encontrados: {len(similar_tickets)}")
        
        if similar_tickets:
            print("\nTickets m√°s relevantes:")
            for i, ticket in enumerate(similar_tickets[:2], 1):
                print(f"\n{i}. Ticket #{ticket['id']} - Cliente: {ticket['cliente']}")
                print(f"   Similitud: {(1 - ticket.get('similarity_score', 0)/10)*100:.1f}%")
                print(f"   Consulta original: {ticket['consulta']}")
                if ticket.get('respuesta'):
                    print(f"   Respuesta: {ticket['respuesta'][:200]}...")

def test_system_performance():
    print("\n‚ö° TEST 3: RENDIMIENTO DEL SISTEMA")
    print_separator()
    
    rag = RAGEngine('data/normativas', 'data/tickets.json')
    
    # Test 1: Velocidad de inicializaci√≥n
    print("Prueba de reinicializaci√≥n del sistema...")
    start_time = time.time()
    rag = RAGEngine('data/normativas', 'data/tickets.json')
    init_time = time.time() - start_time
    print(f"Tiempo de inicializaci√≥n: {init_time:.2f} segundos")
    
    # Test 2: Prueba de carga
    print("\nPrueba de carga (10 b√∫squedas consecutivas)...")
    query = "requisitos de ventilaci√≥n"
    times = []
    
    for i in range(10):
        start_time = time.time()
        results = rag.search_normativas(query)
        times.append(time.time() - start_time)
    
    avg_time = sum(times) / len(times)
    print(f"Tiempo promedio de b√∫squeda: {avg_time:.2f} segundos")
    print(f"Tiempo m√≠nimo: {min(times):.2f} segundos")
    print(f"Tiempo m√°ximo: {max(times):.2f} segundos")

def main():
    print("üöÄ INICIANDO PRUEBAS EXHAUSTIVAS DEL SISTEMA")
    print_separator()
    
    try:
        test_normativas_search()
        test_similar_tickets()
        test_system_performance()
        
        print("\n‚úÖ TODAS LAS PRUEBAS COMPLETADAS")
        print_separator()
        
    except Exception as e:
        print(f"\n‚ùå ERROR EN LAS PRUEBAS: {str(e)}")
        raise

if __name__ == "__main__":
    main()